// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: referee.proto

#include "referee.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_referee_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_referee_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_Referee_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_referee_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_Referee_TeamInfo;
}  // namespace protobuf_referee_2eproto
class SSL_Referee_TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_Referee_TeamInfo>
      _instance;
} _SSL_Referee_TeamInfo_default_instance_;
class SSL_Referee_PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_Referee_Point>
      _instance;
} _SSL_Referee_Point_default_instance_;
class SSL_RefereeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_Referee>
      _instance;
} _SSL_Referee_default_instance_;
namespace protobuf_referee_2eproto {
static void InitDefaultsSSL_Referee_TeamInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_Referee_TeamInfo_default_instance_;
    new (ptr) ::SSL_Referee_TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_Referee_TeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_Referee_TeamInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_Referee_TeamInfo}, {}};

static void InitDefaultsSSL_Referee_Point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_Referee_Point_default_instance_;
    new (ptr) ::SSL_Referee_Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_Referee_Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_Referee_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_Referee_Point}, {}};

static void InitDefaultsSSL_Referee() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_Referee_default_instance_;
    new (ptr) ::SSL_Referee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_Referee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_Referee =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_Referee}, {
      &protobuf_referee_2eproto::scc_info_SSL_Referee_TeamInfo.base,
      &protobuf_referee_2eproto::scc_info_SSL_Referee_Point.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_Referee_TeamInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_Referee_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_Referee.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, red_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, yellow_card_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, yellow_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, timeouts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, timeout_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_TeamInfo, goalie_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee_Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, packet_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, stage_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, command_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, command_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SSL_Referee, designated_position_),
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::SSL_Referee_TeamInfo)},
  { 21, 28, sizeof(::SSL_Referee_Point)},
  { 30, 44, sizeof(::SSL_Referee)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_Referee_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_Referee_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_Referee_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "referee.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rreferee.proto\"\341\t\n\013SSL_Referee\022\030\n\020packe"
      "t_timestamp\030\001 \002(\004\022!\n\005stage\030\002 \002(\0162\022.SSL_R"
      "eferee.Stage\022\027\n\017stage_time_left\030\003 \001(\021\022%\n"
      "\007command\030\004 \002(\0162\024.SSL_Referee.Command\022\027\n\017"
      "command_counter\030\005 \002(\r\022\031\n\021command_timesta"
      "mp\030\006 \002(\004\022%\n\006yellow\030\007 \002(\0132\025.SSL_Referee.T"
      "eamInfo\022#\n\004blue\030\010 \002(\0132\025.SSL_Referee.Team"
      "Info\022/\n\023designated_position\030\t \001(\0132\022.SSL_"
      "Referee.Point\032\247\001\n\010TeamInfo\022\014\n\004name\030\001 \002(\t"
      "\022\r\n\005score\030\002 \002(\r\022\021\n\tred_cards\030\003 \002(\r\022\035\n\021ye"
      "llow_card_times\030\004 \003(\rB\002\020\001\022\024\n\014yellow_card"
      "s\030\005 \002(\r\022\020\n\010timeouts\030\006 \002(\r\022\024\n\014timeout_tim"
      "e\030\007 \002(\r\022\016\n\006goalie\030\010 \002(\r\032\035\n\005Point\022\t\n\001x\030\001 "
      "\002(\002\022\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL_FIRST"
      "_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024\n\020NO"
      "RMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HALF_P"
      "RE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTRA_TI"
      "ME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006\022\024\n\020"
      "EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIME\020\010\022"
      "\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_SECO"
      "ND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020\013\022\024\n"
      "\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\206\003\n\007C"
      "ommand\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL_STA"
      "RT\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KICKOFF"
      "_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022\032\n\026P"
      "REPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_PENAL"
      "TY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n\020DIR"
      "ECT_FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_YELLOW\020"
      "\n\022\026\n\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEOUT_YEL"
      "LOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\017\n\013GOAL_YELLOW\020\016"
      "\022\r\n\tGOAL_BLUE\020\017\022\031\n\025BALL_PLACEMENT_YELLOW"
      "\020\020\022\027\n\023BALL_PLACEMENT_BLUE\020\021"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "referee.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_referee_2eproto
const ::google::protobuf::EnumDescriptor* SSL_Referee_Stage_descriptor() {
  protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_referee_2eproto::file_level_enum_descriptors[0];
}
bool SSL_Referee_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SSL_Referee_Stage SSL_Referee::NORMAL_FIRST_HALF_PRE;
const SSL_Referee_Stage SSL_Referee::NORMAL_FIRST_HALF;
const SSL_Referee_Stage SSL_Referee::NORMAL_HALF_TIME;
const SSL_Referee_Stage SSL_Referee::NORMAL_SECOND_HALF_PRE;
const SSL_Referee_Stage SSL_Referee::NORMAL_SECOND_HALF;
const SSL_Referee_Stage SSL_Referee::EXTRA_TIME_BREAK;
const SSL_Referee_Stage SSL_Referee::EXTRA_FIRST_HALF_PRE;
const SSL_Referee_Stage SSL_Referee::EXTRA_FIRST_HALF;
const SSL_Referee_Stage SSL_Referee::EXTRA_HALF_TIME;
const SSL_Referee_Stage SSL_Referee::EXTRA_SECOND_HALF_PRE;
const SSL_Referee_Stage SSL_Referee::EXTRA_SECOND_HALF;
const SSL_Referee_Stage SSL_Referee::PENALTY_SHOOTOUT_BREAK;
const SSL_Referee_Stage SSL_Referee::PENALTY_SHOOTOUT;
const SSL_Referee_Stage SSL_Referee::POST_GAME;
const SSL_Referee_Stage SSL_Referee::Stage_MIN;
const SSL_Referee_Stage SSL_Referee::Stage_MAX;
const int SSL_Referee::Stage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SSL_Referee_Command_descriptor() {
  protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_referee_2eproto::file_level_enum_descriptors[1];
}
bool SSL_Referee_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SSL_Referee_Command SSL_Referee::HALT;
const SSL_Referee_Command SSL_Referee::STOP;
const SSL_Referee_Command SSL_Referee::NORMAL_START;
const SSL_Referee_Command SSL_Referee::FORCE_START;
const SSL_Referee_Command SSL_Referee::PREPARE_KICKOFF_YELLOW;
const SSL_Referee_Command SSL_Referee::PREPARE_KICKOFF_BLUE;
const SSL_Referee_Command SSL_Referee::PREPARE_PENALTY_YELLOW;
const SSL_Referee_Command SSL_Referee::PREPARE_PENALTY_BLUE;
const SSL_Referee_Command SSL_Referee::DIRECT_FREE_YELLOW;
const SSL_Referee_Command SSL_Referee::DIRECT_FREE_BLUE;
const SSL_Referee_Command SSL_Referee::INDIRECT_FREE_YELLOW;
const SSL_Referee_Command SSL_Referee::INDIRECT_FREE_BLUE;
const SSL_Referee_Command SSL_Referee::TIMEOUT_YELLOW;
const SSL_Referee_Command SSL_Referee::TIMEOUT_BLUE;
const SSL_Referee_Command SSL_Referee::GOAL_YELLOW;
const SSL_Referee_Command SSL_Referee::GOAL_BLUE;
const SSL_Referee_Command SSL_Referee::BALL_PLACEMENT_YELLOW;
const SSL_Referee_Command SSL_Referee::BALL_PLACEMENT_BLUE;
const SSL_Referee_Command SSL_Referee::Command_MIN;
const SSL_Referee_Command SSL_Referee::Command_MAX;
const int SSL_Referee::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SSL_Referee_TeamInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_Referee_TeamInfo::kNameFieldNumber;
const int SSL_Referee_TeamInfo::kScoreFieldNumber;
const int SSL_Referee_TeamInfo::kRedCardsFieldNumber;
const int SSL_Referee_TeamInfo::kYellowCardTimesFieldNumber;
const int SSL_Referee_TeamInfo::kYellowCardsFieldNumber;
const int SSL_Referee_TeamInfo::kTimeoutsFieldNumber;
const int SSL_Referee_TeamInfo::kTimeoutTimeFieldNumber;
const int SSL_Referee_TeamInfo::kGoalieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_Referee_TeamInfo::SSL_Referee_TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_referee_2eproto::scc_info_SSL_Referee_TeamInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_Referee.TeamInfo)
}
SSL_Referee_TeamInfo::SSL_Referee_TeamInfo(const SSL_Referee_TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      yellow_card_times_(from.yellow_card_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&goalie_) -
    reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
  // @@protoc_insertion_point(copy_constructor:SSL_Referee.TeamInfo)
}

void SSL_Referee_TeamInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goalie_) -
      reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
}

SSL_Referee_TeamInfo::~SSL_Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:SSL_Referee.TeamInfo)
  SharedDtor();
}

void SSL_Referee_TeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SSL_Referee_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_Referee_TeamInfo::descriptor() {
  ::protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_Referee_TeamInfo& SSL_Referee_TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_referee_2eproto::scc_info_SSL_Referee_TeamInfo.base);
  return *internal_default_instance();
}


void SSL_Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_card_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goalie_) -
        reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_Referee_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_Referee.TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SSL_Referee.TeamInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 red_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_red_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_yellow_card_times())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_yellow_card_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 yellow_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_yellow_cards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yellow_cards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timeouts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeouts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeouts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timeout_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_timeout_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 goalie = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_goalie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_Referee.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_Referee.TeamInfo)
  return false;
#undef DO_
}

void SSL_Referee_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_Referee.TeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->red_cards(), output);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _yellow_card_times_cached_byte_size_));
  }
  for (int i = 0, n = this->yellow_card_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->yellow_card_times(i), output);
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yellow_cards(), output);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeouts(), output);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timeout_time(), output);
  }

  // required uint32 goalie = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goalie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_Referee.TeamInfo)
}

::google::protobuf::uint8* SSL_Referee_TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_Referee.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SSL_Referee.TeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  if (this->yellow_card_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _yellow_card_times_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->yellow_card_times_, target);
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout_time(), target);
  }

  // required uint32 goalie = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goalie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_Referee.TeamInfo)
  return target;
}

size_t SSL_Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_Referee.TeamInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_score()) {
    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  if (has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());
  }

  if (has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());
  }

  if (has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());
  }

  if (has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());
  }

  if (has_goalie()) {
    // required uint32 goalie = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalie());
  }

  return total_size;
}
size_t SSL_Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_Referee.TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

    // required uint32 red_cards = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_cards());

    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yellow_cards());

    // required uint32 timeouts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeouts());

    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_time());

    // required uint32 goalie = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goalie());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->yellow_card_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _yellow_card_times_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_Referee_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_Referee_TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_Referee_TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_Referee.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_Referee.TeamInfo)
    MergeFrom(*source);
  }
}

void SSL_Referee_TeamInfo::MergeFrom(const SSL_Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_card_times_.MergeFrom(from.yellow_card_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      red_cards_ = from.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      yellow_cards_ = from.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeouts_ = from.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_time_ = from.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      goalie_ = from.goalie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_Referee_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_Referee_TeamInfo::CopyFrom(const SSL_Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_Referee_TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void SSL_Referee_TeamInfo::Swap(SSL_Referee_TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_Referee_TeamInfo::InternalSwap(SSL_Referee_TeamInfo* other) {
  using std::swap;
  yellow_card_times_.InternalSwap(&other->yellow_card_times_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(red_cards_, other->red_cards_);
  swap(yellow_cards_, other->yellow_cards_);
  swap(timeouts_, other->timeouts_);
  swap(timeout_time_, other->timeout_time_);
  swap(goalie_, other->goalie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_Referee_TeamInfo::GetMetadata() const {
  protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_Referee_Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_Referee_Point::kXFieldNumber;
const int SSL_Referee_Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_Referee_Point::SSL_Referee_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_referee_2eproto::scc_info_SSL_Referee_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_Referee.Point)
}
SSL_Referee_Point::SSL_Referee_Point(const SSL_Referee_Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:SSL_Referee.Point)
}

void SSL_Referee_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

SSL_Referee_Point::~SSL_Referee_Point() {
  // @@protoc_insertion_point(destructor:SSL_Referee.Point)
  SharedDtor();
}

void SSL_Referee_Point::SharedDtor() {
}

void SSL_Referee_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_Referee_Point::descriptor() {
  ::protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_Referee_Point& SSL_Referee_Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_referee_2eproto::scc_info_SSL_Referee_Point.base);
  return *internal_default_instance();
}


void SSL_Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_Referee_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_Referee.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_Referee.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_Referee.Point)
  return false;
#undef DO_
}

void SSL_Referee_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_Referee.Point)
}

::google::protobuf::uint8* SSL_Referee_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_Referee.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_Referee.Point)
  return target;
}

size_t SSL_Referee_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_Referee.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_Referee_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_Referee.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_Referee_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_Referee_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_Referee_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_Referee.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_Referee.Point)
    MergeFrom(*source);
  }
}

void SSL_Referee_Point::MergeFrom(const SSL_Referee_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_Referee.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_Referee_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_Referee_Point::CopyFrom(const SSL_Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_Referee_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SSL_Referee_Point::Swap(SSL_Referee_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_Referee_Point::InternalSwap(SSL_Referee_Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_Referee_Point::GetMetadata() const {
  protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SSL_Referee::InitAsDefaultInstance() {
  ::_SSL_Referee_default_instance_._instance.get_mutable()->yellow_ = const_cast< ::SSL_Referee_TeamInfo*>(
      ::SSL_Referee_TeamInfo::internal_default_instance());
  ::_SSL_Referee_default_instance_._instance.get_mutable()->blue_ = const_cast< ::SSL_Referee_TeamInfo*>(
      ::SSL_Referee_TeamInfo::internal_default_instance());
  ::_SSL_Referee_default_instance_._instance.get_mutable()->designated_position_ = const_cast< ::SSL_Referee_Point*>(
      ::SSL_Referee_Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_Referee::kPacketTimestampFieldNumber;
const int SSL_Referee::kStageFieldNumber;
const int SSL_Referee::kStageTimeLeftFieldNumber;
const int SSL_Referee::kCommandFieldNumber;
const int SSL_Referee::kCommandCounterFieldNumber;
const int SSL_Referee::kCommandTimestampFieldNumber;
const int SSL_Referee::kYellowFieldNumber;
const int SSL_Referee::kBlueFieldNumber;
const int SSL_Referee::kDesignatedPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_Referee::SSL_Referee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_referee_2eproto::scc_info_SSL_Referee.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_Referee)
}
SSL_Referee::SSL_Referee(const SSL_Referee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yellow()) {
    yellow_ = new ::SSL_Referee_TeamInfo(*from.yellow_);
  } else {
    yellow_ = NULL;
  }
  if (from.has_blue()) {
    blue_ = new ::SSL_Referee_TeamInfo(*from.blue_);
  } else {
    blue_ = NULL;
  }
  if (from.has_designated_position()) {
    designated_position_ = new ::SSL_Referee_Point(*from.designated_position_);
  } else {
    designated_position_ = NULL;
  }
  ::memcpy(&packet_timestamp_, &from.packet_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_timestamp_) -
    reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(command_timestamp_));
  // @@protoc_insertion_point(copy_constructor:SSL_Referee)
}

void SSL_Referee::SharedCtor() {
  ::memset(&yellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_timestamp_) -
      reinterpret_cast<char*>(&yellow_)) + sizeof(command_timestamp_));
}

SSL_Referee::~SSL_Referee() {
  // @@protoc_insertion_point(destructor:SSL_Referee)
  SharedDtor();
}

void SSL_Referee::SharedDtor() {
  if (this != internal_default_instance()) delete yellow_;
  if (this != internal_default_instance()) delete blue_;
  if (this != internal_default_instance()) delete designated_position_;
}

void SSL_Referee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSL_Referee::descriptor() {
  ::protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSL_Referee& SSL_Referee::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_referee_2eproto::scc_info_SSL_Referee.base);
  return *internal_default_instance();
}


void SSL_Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(yellow_ != NULL);
      yellow_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blue_ != NULL);
      blue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(designated_position_ != NULL);
      designated_position_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&packet_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_counter_) -
        reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(command_counter_));
  }
  command_timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_Referee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_Referee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 packet_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_packet_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packet_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_Referee.Stage stage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::SSL_Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 stage_time_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stage_time_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stage_time_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_Referee.Command command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSL_Referee_Command_IsValid(value)) {
            set_command(static_cast< ::SSL_Referee_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 command_counter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_command_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 command_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_command_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_Referee.TeamInfo yellow = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SSL_Referee.TeamInfo blue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_Referee.Point designated_position = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_designated_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_Referee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_Referee)
  return false;
#undef DO_
}

void SSL_Referee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->packet_timestamp(), output);
  }

  // required .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->stage_time_left(), output);
  }

  // required .SSL_Referee.Command command = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->command(), output);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->command_counter(), output);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->command_timestamp(), output);
  }

  // required .SSL_Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_yellow(), output);
  }

  // required .SSL_Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_blue(), output);
  }

  // optional .SSL_Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_designated_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_Referee)
}

::google::protobuf::uint8* SSL_Referee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_Referee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->packet_timestamp(), target);
  }

  // required .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->stage_time_left(), target);
  }

  // required .SSL_Referee.Command command = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->command_timestamp(), target);
  }

  // required .SSL_Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_yellow(), deterministic, target);
  }

  // required .SSL_Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_blue(), deterministic, target);
  }

  // optional .SSL_Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_designated_position(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_Referee)
  return target;
}

size_t SSL_Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_Referee)
  size_t total_size = 0;

  if (has_yellow()) {
    // required .SSL_Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yellow_);
  }

  if (has_blue()) {
    // required .SSL_Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  if (has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());
  }

  if (has_stage()) {
    // required .SSL_Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  if (has_command()) {
    // required .SSL_Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  if (has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());
  }

  if (has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());
  }

  return total_size;
}
size_t SSL_Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_Referee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001db) ^ 0x000001db) == 0) {  // All required fields are present.
    // required .SSL_Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yellow_);

    // required .SSL_Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_);

    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packet_timestamp());

    // required .SSL_Referee.Stage stage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());

    // required .SSL_Referee.Command command = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());

    // required uint32 command_counter = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->command_counter());

    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->command_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .SSL_Referee.Point designated_position = 9;
  if (has_designated_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *designated_position_);
  }

  // optional sint32 stage_time_left = 3;
  if (has_stage_time_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->stage_time_left());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_Referee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_Referee)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_Referee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_Referee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_Referee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_Referee)
    MergeFrom(*source);
  }
}

void SSL_Referee::MergeFrom(const SSL_Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_Referee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_yellow()->::SSL_Referee_TeamInfo::MergeFrom(from.yellow());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_blue()->::SSL_Referee_TeamInfo::MergeFrom(from.blue());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_designated_position()->::SSL_Referee_Point::MergeFrom(from.designated_position());
    }
    if (cached_has_bits & 0x00000008u) {
      packet_timestamp_ = from.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000020u) {
      stage_time_left_ = from.stage_time_left_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000080u) {
      command_counter_ = from.command_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_command_timestamp(from.command_timestamp());
  }
}

void SSL_Referee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_Referee::CopyFrom(const SSL_Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_Referee::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001db) != 0x000001db) return false;
  if (has_yellow()) {
    if (!this->yellow_->IsInitialized()) return false;
  }
  if (has_blue()) {
    if (!this->blue_->IsInitialized()) return false;
  }
  if (has_designated_position()) {
    if (!this->designated_position_->IsInitialized()) return false;
  }
  return true;
}

void SSL_Referee::Swap(SSL_Referee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_Referee::InternalSwap(SSL_Referee* other) {
  using std::swap;
  swap(yellow_, other->yellow_);
  swap(blue_, other->blue_);
  swap(designated_position_, other->designated_position_);
  swap(packet_timestamp_, other->packet_timestamp_);
  swap(stage_, other->stage_);
  swap(stage_time_left_, other->stage_time_left_);
  swap(command_, other->command_);
  swap(command_counter_, other->command_counter_);
  swap(command_timestamp_, other->command_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSL_Referee::GetMetadata() const {
  protobuf_referee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_referee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_Referee_TeamInfo* Arena::CreateMaybeMessage< ::SSL_Referee_TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_Referee_TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_Referee_Point* Arena::CreateMaybeMessage< ::SSL_Referee_Point >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_Referee_Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SSL_Referee* Arena::CreateMaybeMessage< ::SSL_Referee >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_Referee >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
