// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grSim_Commands.proto

#include "grSim_Commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_grSim_5fCommands_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_grSim_5fCommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_grSim_Robot_Command;
}  // namespace protobuf_grSim_5fCommands_2eproto
class grSim_Robot_CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<grSim_Robot_Command>
      _instance;
} _grSim_Robot_Command_default_instance_;
class grSim_CommandsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<grSim_Commands>
      _instance;
} _grSim_Commands_default_instance_;
namespace protobuf_grSim_5fCommands_2eproto {
static void InitDefaultsgrSim_Robot_Command() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_grSim_Robot_Command_default_instance_;
    new (ptr) ::grSim_Robot_Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grSim_Robot_Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_grSim_Robot_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgrSim_Robot_Command}, {}};

static void InitDefaultsgrSim_Commands() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_grSim_Commands_default_instance_;
    new (ptr) ::grSim_Commands();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grSim_Commands::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_grSim_Commands =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgrSim_Commands}, {
      &protobuf_grSim_5fCommands_2eproto::scc_info_grSim_Robot_Command.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_grSim_Robot_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_grSim_Commands.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, kickspeedx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, kickspeedz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, veltangent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, velnormal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, velangular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, spinner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, wheelsspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, wheel1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, wheel2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, wheel3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Robot_Command, wheel4_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Commands, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Commands, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Commands, isteamyellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grSim_Commands, robot_commands_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::grSim_Robot_Command)},
  { 29, 37, sizeof(::grSim_Commands)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_grSim_Robot_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_grSim_Commands_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "grSim_Commands.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024grSim_Commands.proto\"\352\001\n\023grSim_Robot_C"
      "ommand\022\n\n\002id\030\001 \002(\r\022\022\n\nkickspeedx\030\002 \002(\002\022\022"
      "\n\nkickspeedz\030\003 \002(\002\022\022\n\nveltangent\030\004 \002(\002\022\021"
      "\n\tvelnormal\030\005 \002(\002\022\022\n\nvelangular\030\006 \002(\002\022\017\n"
      "\007spinner\030\007 \002(\010\022\023\n\013wheelsspeed\030\010 \002(\010\022\016\n\006w"
      "heel1\030\t \001(\002\022\016\n\006wheel2\030\n \001(\002\022\016\n\006wheel3\030\013 "
      "\001(\002\022\016\n\006wheel4\030\014 \001(\002\"g\n\016grSim_Commands\022\021\n"
      "\ttimestamp\030\001 \002(\001\022\024\n\014isteamyellow\030\002 \002(\010\022,"
      "\n\016robot_commands\030\003 \003(\0132\024.grSim_Robot_Com"
      "mand"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grSim_Commands.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_grSim_5fCommands_2eproto

// ===================================================================

void grSim_Robot_Command::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int grSim_Robot_Command::kIdFieldNumber;
const int grSim_Robot_Command::kKickspeedxFieldNumber;
const int grSim_Robot_Command::kKickspeedzFieldNumber;
const int grSim_Robot_Command::kVeltangentFieldNumber;
const int grSim_Robot_Command::kVelnormalFieldNumber;
const int grSim_Robot_Command::kVelangularFieldNumber;
const int grSim_Robot_Command::kSpinnerFieldNumber;
const int grSim_Robot_Command::kWheelsspeedFieldNumber;
const int grSim_Robot_Command::kWheel1FieldNumber;
const int grSim_Robot_Command::kWheel2FieldNumber;
const int grSim_Robot_Command::kWheel3FieldNumber;
const int grSim_Robot_Command::kWheel4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

grSim_Robot_Command::grSim_Robot_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_grSim_5fCommands_2eproto::scc_info_grSim_Robot_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grSim_Robot_Command)
}
grSim_Robot_Command::grSim_Robot_Command(const grSim_Robot_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel4_) -
    reinterpret_cast<char*>(&id_)) + sizeof(wheel4_));
  // @@protoc_insertion_point(copy_constructor:grSim_Robot_Command)
}

void grSim_Robot_Command::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel4_) -
      reinterpret_cast<char*>(&id_)) + sizeof(wheel4_));
}

grSim_Robot_Command::~grSim_Robot_Command() {
  // @@protoc_insertion_point(destructor:grSim_Robot_Command)
  SharedDtor();
}

void grSim_Robot_Command::SharedDtor() {
}

void grSim_Robot_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* grSim_Robot_Command::descriptor() {
  ::protobuf_grSim_5fCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_grSim_5fCommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const grSim_Robot_Command& grSim_Robot_Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_grSim_5fCommands_2eproto::scc_info_grSim_Robot_Command.base);
  return *internal_default_instance();
}


void grSim_Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:grSim_Robot_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheelsspeed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(wheelsspeed_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&wheel1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel4_) -
        reinterpret_cast<char*>(&wheel1_)) + sizeof(wheel4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool grSim_Robot_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grSim_Robot_Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float kickspeedx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_kickspeedx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float kickspeedz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_kickspeedz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float veltangent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_veltangent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &veltangent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float velnormal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_velnormal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velnormal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float velangular = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_velangular();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velangular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool spinner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_spinner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spinner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool wheelsspeed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_wheelsspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelsspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_wheel1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_wheel2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel3 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_wheel3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel4 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_wheel4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grSim_Robot_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grSim_Robot_Command)
  return false;
#undef DO_
}

void grSim_Robot_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grSim_Robot_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float kickspeedx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kickspeedx(), output);
  }

  // required float kickspeedz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kickspeedz(), output);
  }

  // required float veltangent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->veltangent(), output);
  }

  // required float velnormal = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velnormal(), output);
  }

  // required float velangular = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velangular(), output);
  }

  // required bool spinner = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->spinner(), output);
  }

  // required bool wheelsspeed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wheelsspeed(), output);
  }

  // optional float wheel1 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wheel1(), output);
  }

  // optional float wheel2 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->wheel2(), output);
  }

  // optional float wheel3 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->wheel3(), output);
  }

  // optional float wheel4 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->wheel4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grSim_Robot_Command)
}

::google::protobuf::uint8* grSim_Robot_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grSim_Robot_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float kickspeedx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kickspeedx(), target);
  }

  // required float kickspeedz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kickspeedz(), target);
  }

  // required float veltangent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->veltangent(), target);
  }

  // required float velnormal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velnormal(), target);
  }

  // required float velangular = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velangular(), target);
  }

  // required bool spinner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->spinner(), target);
  }

  // required bool wheelsspeed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wheelsspeed(), target);
  }

  // optional float wheel1 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wheel1(), target);
  }

  // optional float wheel2 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->wheel2(), target);
  }

  // optional float wheel3 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->wheel3(), target);
  }

  // optional float wheel4 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->wheel4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grSim_Robot_Command)
  return target;
}

size_t grSim_Robot_Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:grSim_Robot_Command)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_kickspeedx()) {
    // required float kickspeedx = 2;
    total_size += 1 + 4;
  }

  if (has_kickspeedz()) {
    // required float kickspeedz = 3;
    total_size += 1 + 4;
  }

  if (has_veltangent()) {
    // required float veltangent = 4;
    total_size += 1 + 4;
  }

  if (has_velnormal()) {
    // required float velnormal = 5;
    total_size += 1 + 4;
  }

  if (has_velangular()) {
    // required float velangular = 6;
    total_size += 1 + 4;
  }

  if (has_spinner()) {
    // required bool spinner = 7;
    total_size += 1 + 1;
  }

  if (has_wheelsspeed()) {
    // required bool wheelsspeed = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t grSim_Robot_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grSim_Robot_Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float kickspeedx = 2;
    total_size += 1 + 4;

    // required float kickspeedz = 3;
    total_size += 1 + 4;

    // required float veltangent = 4;
    total_size += 1 + 4;

    // required float velnormal = 5;
    total_size += 1 + 4;

    // required float velangular = 6;
    total_size += 1 + 4;

    // required bool spinner = 7;
    total_size += 1 + 1;

    // required bool wheelsspeed = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float wheel1 = 9;
    if (has_wheel1()) {
      total_size += 1 + 4;
    }

    // optional float wheel2 = 10;
    if (has_wheel2()) {
      total_size += 1 + 4;
    }

    // optional float wheel3 = 11;
    if (has_wheel3()) {
      total_size += 1 + 4;
    }

    // optional float wheel4 = 12;
    if (has_wheel4()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void grSim_Robot_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grSim_Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const grSim_Robot_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const grSim_Robot_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grSim_Robot_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grSim_Robot_Command)
    MergeFrom(*source);
  }
}

void grSim_Robot_Command::MergeFrom(const grSim_Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grSim_Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      kickspeedx_ = from.kickspeedx_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickspeedz_ = from.kickspeedz_;
    }
    if (cached_has_bits & 0x00000008u) {
      veltangent_ = from.veltangent_;
    }
    if (cached_has_bits & 0x00000010u) {
      velnormal_ = from.velnormal_;
    }
    if (cached_has_bits & 0x00000020u) {
      velangular_ = from.velangular_;
    }
    if (cached_has_bits & 0x00000040u) {
      spinner_ = from.spinner_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheelsspeed_ = from.wheelsspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      wheel1_ = from.wheel1_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel2_ = from.wheel2_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel3_ = from.wheel3_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel4_ = from.wheel4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void grSim_Robot_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grSim_Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grSim_Robot_Command::CopyFrom(const grSim_Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grSim_Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grSim_Robot_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void grSim_Robot_Command::Swap(grSim_Robot_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void grSim_Robot_Command::InternalSwap(grSim_Robot_Command* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(kickspeedx_, other->kickspeedx_);
  swap(kickspeedz_, other->kickspeedz_);
  swap(veltangent_, other->veltangent_);
  swap(velnormal_, other->velnormal_);
  swap(velangular_, other->velangular_);
  swap(spinner_, other->spinner_);
  swap(wheelsspeed_, other->wheelsspeed_);
  swap(wheel1_, other->wheel1_);
  swap(wheel2_, other->wheel2_);
  swap(wheel3_, other->wheel3_);
  swap(wheel4_, other->wheel4_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata grSim_Robot_Command::GetMetadata() const {
  protobuf_grSim_5fCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_grSim_5fCommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void grSim_Commands::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int grSim_Commands::kTimestampFieldNumber;
const int grSim_Commands::kIsteamyellowFieldNumber;
const int grSim_Commands::kRobotCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

grSim_Commands::grSim_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_grSim_5fCommands_2eproto::scc_info_grSim_Commands.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grSim_Commands)
}
grSim_Commands::grSim_Commands(const grSim_Commands& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robot_commands_(from.robot_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&isteamyellow_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(isteamyellow_));
  // @@protoc_insertion_point(copy_constructor:grSim_Commands)
}

void grSim_Commands::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isteamyellow_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(isteamyellow_));
}

grSim_Commands::~grSim_Commands() {
  // @@protoc_insertion_point(destructor:grSim_Commands)
  SharedDtor();
}

void grSim_Commands::SharedDtor() {
}

void grSim_Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* grSim_Commands::descriptor() {
  ::protobuf_grSim_5fCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_grSim_5fCommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const grSim_Commands& grSim_Commands::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_grSim_5fCommands_2eproto::scc_info_grSim_Commands.base);
  return *internal_default_instance();
}


void grSim_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:grSim_Commands)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isteamyellow_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(isteamyellow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool grSim_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grSim_Commands)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isteamyellow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isteamyellow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isteamyellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .grSim_Robot_Command robot_commands = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robot_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grSim_Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grSim_Commands)
  return false;
#undef DO_
}

void grSim_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grSim_Commands)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // required bool isteamyellow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isteamyellow(), output);
  }

  // repeated .grSim_Robot_Command robot_commands = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_commands_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->robot_commands(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grSim_Commands)
}

::google::protobuf::uint8* grSim_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grSim_Commands)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // required bool isteamyellow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isteamyellow(), target);
  }

  // repeated .grSim_Robot_Command robot_commands = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_commands_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->robot_commands(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grSim_Commands)
  return target;
}

size_t grSim_Commands::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:grSim_Commands)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required double timestamp = 1;
    total_size += 1 + 8;
  }

  if (has_isteamyellow()) {
    // required bool isteamyellow = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t grSim_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grSim_Commands)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double timestamp = 1;
    total_size += 1 + 8;

    // required bool isteamyellow = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .grSim_Robot_Command robot_commands = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robot_commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void grSim_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grSim_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const grSim_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const grSim_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grSim_Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grSim_Commands)
    MergeFrom(*source);
  }
}

void grSim_Commands::MergeFrom(const grSim_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grSim_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_commands_.MergeFrom(from.robot_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      isteamyellow_ = from.isteamyellow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void grSim_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grSim_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grSim_Commands::CopyFrom(const grSim_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grSim_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grSim_Commands::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robot_commands())) return false;
  return true;
}

void grSim_Commands::Swap(grSim_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void grSim_Commands::InternalSwap(grSim_Commands* other) {
  using std::swap;
  CastToBase(&robot_commands_)->InternalSwap(CastToBase(&other->robot_commands_));
  swap(timestamp_, other->timestamp_);
  swap(isteamyellow_, other->isteamyellow_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata grSim_Commands::GetMetadata() const {
  protobuf_grSim_5fCommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_grSim_5fCommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grSim_Robot_Command* Arena::CreateMaybeMessage< ::grSim_Robot_Command >(Arena* arena) {
  return Arena::CreateInternal< ::grSim_Robot_Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grSim_Commands* Arena::CreateMaybeMessage< ::grSim_Commands >(Arena* arena) {
  return Arena::CreateInternal< ::grSim_Commands >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
